class Solution:
    """
    @param: heights: a matrix of integers
    @return: an integer
    """
    def trapRainWater(self, heights):
        # write your code here
        from heapq import heappush, heappop #import heap
        
        if heights == []:
            return 0;
        
        a, b = len(heights), len(heights[0]);    
        flag = [[0 for _ in range(a)] for _ in range(b)];   #flag if it's been visited
        offset = [(-1, 0), (1, 0), (0, -1), (0, 1)];        #direction set
        #priority queue, finding the min; perimeter first
        prique = [];
        for i in range(a):
            heappush(prique, (heights[i][0], i, 0)); #what goes into the priority queue: (height, x-cordinate, y-cordinate)
            flag[i][0] = 1;
        for i in range(b):
            heappush(prique, (heights[i][n - 1], i, n - 1));
            flag[i][0] = 1;
            
        #from the min perimeter
        water = 0;
        while prique:           #WHY???
            h, x, y = heappop(prique);
            for dx, dy in offset:
                newx, newy = x + dx, y + dy;
                if 0 <= newx < a and 0 <= newy < b and flag[newx][newy] == 0:
                    flag[newx][newy] = 1;
                    newh = max(h, heights[newx][newy]);         #WHY??
                    heappush(prique, (newh, newx, newy));
                    if h > heights[newx][newy]:
                        water += h - heights[newx][newy];
                    
        return water;
